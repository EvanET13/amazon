from __future__ import print_function
import random

# --------------- Helpers that build all of the responses ----------------------

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }

def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


# --------------- Functions that control the skill's behavior ------------------
def get_weather_response():
    """ An example of a custom intent. Same structure as welcome message, just make sure to add this intent
    in your alexa skill in order for it to work.
    """
    session_attributes = {}
    card_title = "GetWeather"
    speech_output = "Now, it is chill and windy. It is a nice weather to hang out with friends"
    reprompt_text = "I can't hear you, please say it again"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
def get_PlayCoinFlip_resposes():
    session_attributes = { "status" : "playing" }
    card_title = "PlayCoinFlip"
    speech_output = "Ok boomer! Choose heads or tails."
    reprompt_text = "speak up old one"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

# def get_coinflip_response():
#     session_attributes = { "status" : "playing" }
#     card_title = "coinflip"
#     reprompt_text = "I'm sorry you speak so softly, but scream at me so i can hear you, please?"
#     should_end_session = False
#     user_choice = intent_request['intent']['slots']['flip']['value']
#     alexa_choice = random.choice(['heads','tails'])
    
    # if alexa_choice == user_choice:
    #     speech_output = "You're as smart as i am, it's suspisous"
    # if alexa_choice == 'heads':
    #     if user_choice == 'tails':
    #         speech_output = "I am the winner you heathen"
    # if alexa_choice == 'tails':
    #     if user_choice == 'heads':
    #         speech_output = "I have lost, the world will end now, hahaha"
    # return build_response(session_attributes, build_speechlet_response(
    #     card_title, speech_output, reprompt_text, should_end_session))
        
def get_PlayRockPaperScissors_response():
    session_attributes = { "status" : "playing" }  #sends choclates to alexa
    card_title = "PlayRockPaperScissors"
    speech_output = "OK! Choose rock paper or scissors"
    reprompt_text = "Speak lounder"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
def get_choose_response():
    session_attributes = {}
    card_title = "choose"
    speech_output = "Choose rock paper or scissors"
    reprompt_text = "Speak lounder"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
def get_chooser_response(intent_request):
    user_choice = intent_request['intent']['slots']['something']['value']
    alexa_choice = random.choice(['rock','paper','scissors','heads','tails'])
    if alexa_choice == user_choice:
        speech_output = "Let's play again"
    if alexa_choice == 'rock':
        if user_choice == 'paper':
            speech_output = "You are, the winner"
    if alexa_choice == 'paper':
        if user_choice == 'scissors':
            speech_output ="You are, the winner"
    if alexa_choice == 'scissors':
        if user_choice == 'rock':
            speech_output = "You are, the winner"
    if alexa_choice == 'rock':
        if user_choice == 'scissors':
            speech_output = "You are, the loser"
    if alexa_choice == 'scissors':
        if user_choice == 'paper':
            speech_output = "You are, the loser"
    if alexa_choice == 'paper':
        if user_choice == 'rock':
            speech_output = "You are, the loser"
    if alexa_choice == user_choice:
        speech_output = "You're as smart as i am, it's suspisous"
    if alexa_choice == 'heads':
        if user_choice == 'tails':
            speech_output = "I am the winner you heathen"
    if alexa_choice == 'tails':
        if user_choice == 'heads':
            speech_output = "I have lost, the world will end now, hahahahahaha hehehe"
    session_attributes = {"status" : "playing"}   #sends choclate back to lambda
    card_title = "chooser"
    reprompt_text = "Speak lounder"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
    
        

def get_welcome_response():
    """ If we wanted to initialize the session to have some attributes we could
    add those here
    """
    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Welcome to tutorial, let's play rock paper scissors or coin flip. To do so, say play rock paper scissors, or coin flip"
    # If the user either does not reply to the welcome message or says something
    # that is not understood, they will be prompted again with this text.
    reprompt_text = "I don't know if you heard me, welcome to Lylescenter!"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def handle_session_cancel_request():
    card_title = "Session Ended"
    speech_output = "you're welcome, see you later!"
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))
        
def handle_session_stop_request():
    card_title = "Session Ended"
    speech_output = "OK"
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))

# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts.
        One possible use of this function is to initialize specific 
        variables from a previous state stored in an external database
    """
    # Add additional code here as needed
    pass


def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """
    # Dispatch to your skill's launch message
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']
    
    
    # Dispatch to your skill's intent handlers
    if intent_name == "PlayRockPaperScissors":
        return get_PlayRockPaperScissors_response()
    elif intent_name == "chooser":
        if session['attributes']['status'] == "playing":
            return get_chooser_response(intent_request)
    elif intent_name == "PlayCoinFlip":
        return get_PlayCoinFlip_resposes()
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.StopIntent":
        return handle_session_stop_request()
    elif intent_name == "AMAZON.CancelIntent":
        return handle_session_cancel_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.
    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("Incoming request...")
    print(event['request'])
    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])





